{"ast":null,"code":"/* AXIOS */import axios from\"axios\";/* ACTION TYPES */import{USER_LOGIN_REQUEST,USER_LOGIN_SUCCESS,USER_LOGIN_FAIL,USER_LOGOUT,USER_REGISTER_REQUEST,USER_REGISTER_SUCCESS,USER_REGISTER_FAIL,USER_DETAILS_REQUEST,USER_DETAILS_SUCCESS,USER_DETAILS_FAIL,USER_DETAILS_RESET,USER_UPDATE_PROFILE_REQUEST,USER_UPDATE_PROFILE_SUCCESS,USER_UPDATE_PROFILE_FAIL,USER_LIST_REQUEST,USER_LIST_SUCCESS,USER_LIST_FAIL,USER_LIST_RESET,USER_DELETE_REQUEST,USER_DELETE_FAIL,USER_DELETE_SUCCESS,USER_UPDATE_REQUEST,USER_UPDATE_SUCCESS,USER_UPDATE_FAIL,PASSWORD_RESET_REQUEST,PASSWORD_RESET_SUCCESS,PASSWORD_RESET_FAIL}from\"../constants/userConstants\";import{ORDER_LIST_MY_RESET}from\"../constants/orderConstants\";/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */export const login=(email,password)=>async dispatch=>{try{dispatch({type:USER_LOGIN_REQUEST});/* MAKE POST REQUEST TO GET BACK THE USER TOKEN */const config={headers:{\"Content-type\":\"application/json\"}};const{data}=await axios.post(\"/api/users/login/\",{username:email,password:password},config);/* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */localStorage.setItem(\"userInfo\",JSON.stringify(data));}catch(error){dispatch({type:USER_LOGIN_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */export const logout=()=>dispatch=>{/* REMOVE USER INFO FORM LOCAL STORAGE */localStorage.removeItem(\"userInfo\");/* DISPATCH TO REMOVE USER INFO FORM STORE */dispatch({type:USER_LOGOUT});dispatch({type:USER_DETAILS_RESET});/* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */dispatch({type:ORDER_LIST_MY_RESET});/* DISPATCH TO RESET THE DETAILS OF USERS LIST */dispatch({type:USER_LIST_RESET});};/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */export const register=(name,email,password)=>async dispatch=>{try{dispatch({type:USER_REGISTER_REQUEST});/* MAKE POST REQUEST TO GET BACK THE USER TOKEN */const config={headers:{\"Content-type\":\"application/json\"}};const{data}=await axios.post(\"/api/users/register/\",{name:name,email:email,password:password},config);/* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_REGISTER_SUCCESS,payload:data});/* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */localStorage.setItem(\"userInfo\",JSON.stringify(data));}catch(error){dispatch({type:USER_REGISTER_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};export const googleLogin=accessToken=>async dispatch=>{try{dispatch({type:USER_LOGIN_REQUEST});const config={headers:{\"Content-type\":\"application/json\"}};const{data}=await axios.post('/api/users/google-login/',{tokenId:accessToken},// Use tokenId here\nconfig);dispatch({type:USER_LOGIN_SUCCESS,payload:data});localStorage.setItem(\"userInfo\",JSON.stringify(data));}catch(error){dispatch({type:USER_LOGIN_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}console.log(\"Access Token:\",accessToken);};/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */export const getUserDetails=id=>async(dispatch,getState)=>{try{dispatch({type:USER_DETAILS_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\nconst{userLogin:{userInfo}}=getState();/* MAKE GET REQUEST TO GET BACK THE USER DATA */const config={headers:{\"Content-type\":\"application/json\",Authorization:`Bearer ${userInfo.token}`/* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */}};// USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\nconst{data}=await axios.get(`/api/users/${id}/`,config);/* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_DETAILS_SUCCESS,payload:data});}catch(error){dispatch({type:USER_DETAILS_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */export const updateUserProfile=user=>async(dispatch,getState)=>{try{dispatch({type:USER_UPDATE_PROFILE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\nconst{userLogin:{userInfo}}=getState();/* MAKE PUT REQUEST TO SET THE THE USER DATA */const config={headers:{\"Content-type\":\"application/json\",Authorization:`Bearer ${userInfo.token}`/* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */}};// USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\nconst{data}=await axios.put(`/api/users/profile/update`,user,config);/* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */dispatch({type:USER_UPDATE_PROFILE_SUCCESS,payload:data});/* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */dispatch({type:USER_LOGIN_SUCCESS,payload:data});/* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */localStorage.setItem(\"userInfo\",JSON.stringify(data));}catch(error){dispatch({type:USER_UPDATE_PROFILE_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */export const listUsers=()=>async(dispatch,getState)=>{try{dispatch({type:USER_LIST_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\nconst{userLogin:{userInfo}}=getState();/* MAKE GET REQUEST TO SET THE THE USERS LIST */const config={headers:{\"Content-type\":\"application/json\",Authorization:`Bearer ${userInfo.token}`/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */}};const{data}=await axios.get(`/api/users/`,config);dispatch({type:USER_LIST_SUCCESS,payload:data});}catch(error){dispatch({type:USER_LIST_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */export const deleteUser=id=>async(dispatch,getState)=>{try{dispatch({type:USER_DELETE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\nconst{userLogin:{userInfo}}=getState();/* MAKE DELETE REQUEST TO DELETE THE USER */const config={headers:{\"Content-type\":\"application/json\",Authorization:`Bearer ${userInfo.token}`/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */}};const{data}=await axios.delete(`/api/users/delete/${id}`,config);dispatch({type:USER_DELETE_SUCCESS,payload:data});}catch(error){dispatch({type:USER_DELETE_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */export const updateUser=user=>async(dispatch,getState)=>{try{dispatch({type:USER_UPDATE_REQUEST});// PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\nconst{userLogin:{userInfo}}=getState();/* MAKE PUT REQUEST TO EDIT THE USER */const config={headers:{\"Content-type\":\"application/json\",Authorization:`Bearer ${userInfo.token}`/* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */}};const{data}=await axios.put(`/api/users/update/${user._id}/`,user,config);dispatch({type:USER_UPDATE_SUCCESS});/* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */dispatch({type:USER_DETAILS_SUCCESS,payload:data});}catch(error){dispatch({type:USER_UPDATE_FAIL,payload:error.response&&error.response.data.detail?error.response.data.detail:error.message});}};export const passwordReset=email=>async dispatch=>{try{dispatch({type:PASSWORD_RESET_REQUEST});const config={headers:{'Content-Type':'application/json'}};console.log(\"hi\");const{data}=await axios.post('http://127.0.0.1:8000/api/users/passwordreset/',{email},config);console.log(\"Made it!\");dispatch({type:PASSWORD_RESET_SUCCESS,payload:data});}catch(error){dispatch({type:PASSWORD_RESET_FAIL,payload:error.response&&error.response.data.message?error.response.data.message:error.message});}};export const resetPassword=async(uidb64,token,newPassword)=>{console.log('Attempting to reset password');console.log('uidb64:',uidb64);console.log('token:',token);try{const response=await axios.post(`/api/passwordreset/${uidb64}/${token}/`,{new_password:newPassword});console.log('Password reset successful');return response.data;}catch(error){console.error('Password reset error:',error);throw error;}};","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_FAIL","USER_DELETE_SUCCESS","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","PASSWORD_RESET_REQUEST","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","username","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name","googleLogin","accessToken","tokenId","console","log","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id","passwordReset","resetPassword","uidb64","newPassword","new_password"],"sources":["C:/Users/Pranitha/OneDrive/Desktop/VV/ecommerce-django-react/frontend/src/actions/userActions.js"],"sourcesContent":["/* AXIOS */\r\nimport axios from \"axios\";\r\n\r\n\r\n/* ACTION TYPES */\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_RESET,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_RESET,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  PASSWORD_RESET_REQUEST,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\r\n\r\n\r\n/* ACTION CREATOR USED IN USER LOGIN IN LoginScreen COMPONENT & HEADER */\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    });\r\n\r\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"/api/users/login/\",\r\n      { username: email, password: password },\r\n      config\r\n    );\r\n\r\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* ACTION CREATOR USED IN USER LOGOUT IN LoginScreen COMPONENT & HEADER */\r\nexport const logout = () => (dispatch) => {\r\n  /* REMOVE USER INFO FORM LOCAL STORAGE */\r\n  localStorage.removeItem(\"userInfo\");\r\n\r\n  /* DISPATCH TO REMOVE USER INFO FORM STORE */\r\n  dispatch({\r\n    type: USER_LOGOUT,\r\n  });\r\n  dispatch({\r\n    type: USER_DETAILS_RESET,\r\n  });\r\n  /* DISPATCH TO RESET THE DETAILS OF ORDERS MADE BY USER */\r\n  dispatch({\r\n    type: ORDER_LIST_MY_RESET,\r\n  });\r\n  /* DISPATCH TO RESET THE DETAILS OF USERS LIST */\r\n  dispatch({\r\n    type: USER_LIST_RESET,\r\n  });\r\n};\r\n\r\n/* ACTION CREATOR USED IN USER REGISTRATION IN RegisterScreen COMPONENT & HEADER */\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\n\r\n    /* MAKE POST REQUEST TO GET BACK THE USER TOKEN */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"/api/users/register/\",\r\n      { name: name, email: email, password: password },\r\n      config\r\n    );\r\n\r\n    /* IF POST REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    /* AFTER REGISTRATION WE WANT TO IMMEDIATELY LOGIN THE USER */\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    /* SETTING VALUE OF USER INFO IN LOCAL STORAGE SO WE KNOW USER IS LOGGED IN */\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const googleLogin = (accessToken) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users/google-login/',\r\n      { tokenId: accessToken }, // Use tokenId here\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n  console.log(\"Access Token:\", accessToken);\r\n\r\n};\r\n\r\n/* ACTION CREATOR USED IN GETTING USER DETAILS IN ProfileScreen COMPONENT  */\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    });\r\n\r\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    /* MAKE GET REQUEST TO GET BACK THE USER DATA */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\r\n      },\r\n    };\r\n\r\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\r\n    const { data } = await axios.get(`/api/users/${id}/`, config);\r\n\r\n    /* IF GET REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* ACTION CREATOR USED IN UPDATING USER DETAILS IN ProfileScreen COMPONENT  */\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    });\r\n\r\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    /* MAKE PUT REQUEST TO SET THE THE USER DATA */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IN AUTHORISED HE'LL HAVE FULL ACCESS TO HIS PROFILE INFORMATION */,\r\n      },\r\n    };\r\n\r\n    // USING ${id} BECAUSE WHILE ACCESSING NORMAL USER WE'LL PASS STRING 'profile' BUT WHILE ACCESSING ADMIN PANEL WE'LL PASS THE 'id' SO LINK HAS TO BE DYNAMIC\r\n    const { data } = await axios.put(`/api/users/profile/update`, user, config);\r\n\r\n    /* IF PUT REQUEST SUCCESSFULL WE DISPATCH & SEND THE PAYLOAD TO OUR REDUCER */\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    /* AFTER UPDATING PROFILE INFORMATION WE WANT TO LOG THE USER IN WITH THE UPDATED INFO */\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    /* SETTING UPDATED VALUE OF USER INFO IN LOCAL STORAGE */\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* ACTION CREATOR USED TO GET THE LIST OF USERS IN UserList SCREEN  */\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    });\r\n\r\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    /* MAKE GET REQUEST TO SET THE THE USERS LIST */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO SEE LIST OF USERS */,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/users/`, config);\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* ACTION CREATOR USED TO DELETE A USER IN UserList SCREEN */\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    });\r\n\r\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    /* MAKE DELETE REQUEST TO DELETE THE USER */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO DELETE THE USER */,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/users/delete/${id}`, config);\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n/* ACTION CREATOR USED TO EDIT A USER IN UserUpdate SCREEN */\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    });\r\n\r\n    // PULLING OUT THE CURRENT USER WE ARE LOGGED IN AS\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    /* MAKE PUT REQUEST TO EDIT THE USER */\r\n    const config = {\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}` /* PASSING IN USER TOKEN AND IF THE USER IS ADMIN WE'LL BE ABLE TO EDIT THE USER */,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/users/update/${user._id}/`,\r\n      user,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_SUCCESS,\r\n    });\r\n\r\n    /* AFTER UPDATING WE WANT TO RELOAD THE USER DATA */\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const passwordReset = (email) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PASSWORD_RESET_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    console.log(\"hi\")\r\n\r\n    const { data } = await axios.post(\r\n      'http://127.0.0.1:8000/api/users/passwordreset/',\r\n      { email },\r\n      config\r\n    );\r\n    console.log(\"Made it!\")\r\n\r\n    dispatch({\r\n      type: PASSWORD_RESET_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PASSWORD_RESET_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const resetPassword = async (uidb64, token, newPassword) => {\r\n  console.log('Attempting to reset password');\r\n  console.log('uidb64:', uidb64);\r\n  console.log('token:', token);\r\n  try {\r\n    const response = await axios.post(`/api/passwordreset/${uidb64}/${token}/`, {\r\n      new_password: newPassword\r\n    });\r\n    console.log('Password reset successful');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Password reset error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}